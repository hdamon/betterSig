function [HDR,H1,h2] = sopen(arg1,PERMISSION,CHAN,MODE,arg5,arg6)
% SOPEN opens signal files for reading and writing and returns
%       the header information. Many different data formats are supported.
%
% Reading of data:
% 	HDR = sopen(Filename, 'r', [, CHAN [, MODE]]);
% 	[S,HDR] = sread(HDR, NoR, StartPos);
% 	HDR = sclose(HDR);
%
% Writing of data:
%	HDR = sopen(HDR, 'w');
%   	writing requires a predefined HDR struct. see demo3.m
%
% 2nd argument (PERMISSION) is one of the following strings
%	'r'	read header
%	'w'	write header
%       'rz'    on-the-fly decompression of gzipped files (only supported with Octave 2.9.3 or higher).
%       'wz'    on-the-fly compression to gzipped files (only supported with Octave 2.9.3 or higher).
%
% CHAN defines a list of selected Channels
%   	Alternative CHAN can be also a Re-Referencing Matrix ReRefMx,
%       	(i.e. a spatial filter) in form of a matrix or a
%               filename of a MarketMatrix format
%   	E.g. the following command returns the difference and
%   	    the mean of the first two channels.
%   	HDR = sopen(Filename, 'r', [[1;-1],[.5,5]]);
%   	[S,HDR] = sread(HDR, Duration, Start);
%   	HDR = sclose(HDR);
%
% MODE  'UCAL'  uncalibrated data
%       'OVERFLOWDETECTION:OFF' turns off automated overflow detection
%       'OUTPUT:SINGLE' returned data is of class 'single' [default: 'double']
%       '32bit' for NeuroScan CNT files reading 4-byte integer data
%	'BDF:[n]' with [n] some integer number supported by bdf2biosig_events.m
%	        for details see HELP BDF2BIOSIG_EVENTS
%       Options can be concatenated within MODE (use some space, tab, colon or
%	semicolon in between).
%
% HDR contains the Headerinformation and internal data
% S 	returns the signal data
%
% Several files can be loaded at once with SLOAD
%
% see also: SLOAD, SREAD, SSEEK, STELL, SCLOSE, SWRITE, SEOF, BDF2BIOSIG_EVENTS


%	$Id$
%	(C) 1997-2006,2007,2008,2009,2011,2012 by Alois Schloegl <alois.schloegl@gmail.com>
%    	This is part of the BIOSIG-toolbox http://biosig.sf.net/
%
%    BioSig is free software: you can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    BioSig is distributed in the hope that it will be useful,
%    but WITHOUT ANY WARRANTY; without even the implied warranty of
%    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%    GNU General Public License for more details.
%
%    You should have received a copy of the GNU General Public License
%    along with BioSig.  If not, see <http://www.gnu.org/licenses/>.


if isnan(str2double('1, 3'));
  fprintf(2,'Warning BIOSIG: incorrect version of STR2DOUBLE.\n');
  fprintf(2,'- Make sure the path to this directory comes before the path to ... /matlab/toolbox/matlab/strfun/\n');
  fprintf(2,'Running the script below should fix the problem. \n\n');
  fprintf(2,'   x = fileparts( which(''sopen'') );\n');
  fprintf(2,'   rmpath(x);\n   addpath(x,''-begin'');\n\n');
end;

global FLAG_NUMBER_OF_OPEN_FIF_FILES;

if ischar(arg1),
  HDR.FileName = arg1;
  HDR.FILE.stdout = 1;
  HDR.FILE.stderr = 2;
  %elseif length(arg1)~=1,
  %	HDR = [];
elseif isfield(arg1,'name')
  HDR.FileName = arg1.name;
  HDR.FILE = arg1;
  HDR.FILE.stdout = 1;
  HDR.FILE.stderr = 2;
else %if isfield(arg1,'FileName')
  HDR = arg1;  
  %else  
  %	HDR = [];
end;

if ~isfield(HDR,'FILE'),
  HDR.FILE.stdout = 1;
  HDR.FILE.stderr = 2;
end;
if ~isfield(HDR.FILE,'stdout'),
  HDR.FILE.stdout = 1;
end;
if ~isfield(HDR.FILE,'stderr'),
  HDR.FILE.stderr = 2;
end;


if nargin<2,
  HDR.FILE.PERMISSION='r';
elseif isempty(PERMISSION),
  HDR.FILE.PERMISSION='r';
elseif isnumeric(PERMISSION),
  fprintf(HDR.FILE.stderr,'Warning SOPEN: second argument should be PERMISSION, assume its the channel selection\n');
  CHAN = PERMISSION;
  HDR.FILE.PERMISSION = 'r';
elseif ~any(PERMISSION(1)=='RWrw'),
  fprintf(HDR.FILE.stderr,'Warning SOPEN: PERMISSION must be ''r'' or ''w''. Assume PERMISSION is ''r''\n');
  HDR.FILE.PERMISSION = 'r';
else
  HDR.FILE.PERMISSION = PERMISSION;
end;

if nargin<3, CHAN = 0; end;
if nargin<4, MODE = ''; end;

LABELS = {};
if iscell(CHAN),
  LABELS = CHAN;
  CHAN = 0;
  ReRefMx = [];
elseif ischar(CHAN)
  H2 = sopen(CHAN,'r'); H2=sclose(H2);
  ReRefMx = H2.Calib;
  CHAN = find(any(CHAN,2));
elseif all(size(CHAN)>1) || any(floor(CHAN)~=CHAN) || any(CHAN<0) || (any(CHAN==0) && (numel(CHAN)>1));
  ReRefMx = CHAN;
  CHAN = find(any(CHAN,2));
elseif all(CHAN>0) && all(floor(CHAN)==CHAN),
  if any(diff(CHAN)<=0),
    %	fprintf(HDR.FILE.FID,'Warning SOPEN: CHAN-argument not sorted - header information like Labels might not correspond to data.\n');
  end;
  ReRefMx = sparse(CHAN,1:length(CHAN),1);
else
  ReRefMx = [];
end
if isempty(MODE), MODE=' '; end;	% Make sure MODE is not empty -> FINDSTR

% test for type of file
if any(HDR.FILE.PERMISSION=='r'),
  HDR = getfiletype(HDR);
  if (HDR.ErrNum>0),
    fprintf(HDR.FILE.stderr,'%s\n',HDR.ErrMsg);
    return;
  end;
elseif any(HDR.FILE.PERMISSION=='w'),
  [pfad,file,FileExt] = fileparts(HDR.FileName);
  HDR.FILE.Name = file;
  HDR.FILE.Path = pfad;
  HDR.FILE.Ext  = FileExt(2:length(FileExt));
  if any(HDR.FILE.PERMISSION=='z')
    HDR.FILE.Ext = [HDR.FILE.Ext,'.gz'];
    HDR.FileName = [HDR.FileName,'.gz'];
    HDR.FILE.PERMISSION = 'wz';
  else
    HDR.FILE.PERMISSION = 'w';
  end;
  HDR.FILE.OPEN = 0;
  HDR.FILE.FID  = -1;
  HDR.ErrNum  = 0;
  HDR.ErrMsg = '';
  
  if isfield(HDR,'NS') && (HDR.NS>0),
    HDR = physicalunits(HDR);
  end;
end;

%% Initialization
if ~isfield(HDR,'NS');
  HDR.NS = NaN;
end;
if ~isfield(HDR,'SampleRate');
  HDR.SampleRate = NaN;
end;
if ~isfield(HDR,'PhysDim');
  %        HDR.PhysDim = '';
end;
if ~isfield(HDR,'T0');
  HDR.T0 = repmat(nan,1,6);
end;
if ~isfield(HDR,'Filter');
  HDR.Filter.Notch    = NaN;
  HDR.Filter.LowPass  = NaN;
  HDR.Filter.HighPass = NaN;
end;
if ~isfield(HDR,'FLAG');
  HDR.FLAG = [];
end;
if ~isfield(HDR.FLAG,'FILT')
  HDR.FLAG.FILT = 0; 	% FLAG if any filter is applied;
end;
if ~isfield(HDR.FLAG,'TRIGGERED')
  HDR.FLAG.TRIGGERED = 0; % the data is untriggered by default
end;
if ~isfield(HDR.FLAG,'UCAL')
  HDR.FLAG.UCAL = ~isempty(strfind(MODE,'UCAL'));   % FLAG for UN-CALIBRATING
end;
if ~isfield(HDR.FLAG,'OVERFLOWDETECTION')
  HDR.FLAG.OVERFLOWDETECTION = isempty(strfind(upper(MODE),'OVERFLOWDETECTION:OFF'));
end;
if ~isfield(HDR.FLAG,'FORCEALLCHANNEL')
  HDR.FLAG.FORCEALLCHANNEL = ~isempty(strfind(upper(MODE),'FORCEALLCHANNEL'));
end;
if ~isfield(HDR.FLAG,'OUTPUT')
  if ~isempty(strfind(upper(MODE),'OUTPUT:SINGLE'));
    HDR.FLAG.OUTPUT = 'single';
  else
    HDR.FLAG.OUTPUT = 'double';
  end;
end;
FLAG.BDF.status2event = regexp (MODE, '(^BDF:|[ \t;,]BDF:)(\d*)([ \t;,]|$)','tokens');
if ~isempty(FLAG.BDF.status2event)
  FLAG.BDF.status2event = num2int(FLAG.BDF.status2event{1}{2})
end;

if ~isfield(HDR,'EVENT');
  HDR.EVENT.TYP = [];
  HDR.EVENT.POS = [];
end;

%%%%% Define Valid Data types %%%%%%
%GDFTYPES=[0 1 2 3 4 5 6 7 16 17 255+(1:64) 511+(1:64)];
GDFTYPES=[0 1 2 3 4 5 6 7 16 17 18 255+[1 12 22 24] 511+[1 12 22 24]];

%%%%% Define Size for each data type %%%%%
GDFTYP_BYTE=zeros(1,512+64);
GDFTYP_BYTE(256+(1:64))=(1:64)/8;
GDFTYP_BYTE(512+(1:64))=(1:64)/8;
GDFTYP_BYTE(1:19)=[1 1 1 2 2 4 4 8 8 4 8 0 0 0 0 0 4 8 16]';

% Isn't this SOOOOOO Much better than a 10k line function?
loadFuncHandle = betterSig.findHeaderLoadFunction(HDR.TYPE);
[HDR, immediateReturn] = loadFuncHandle(HDR,CHAN,MODE,ReRefMx);
if immediateReturn, return; end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%	General Postprecessing for all formats of Header information
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if isfield(HDR,'Patient') && isfield(HDR.Patient,'Weight') && isfield(HDR.Patient,'Height')
  %% Body Mass Index
  HDR.Patient.BMI = HDR.Patient.Weight * HDR.Patient.Height^-2 * 1e4;
  
  %% Body Surface Area
  % DuBois D, DuBois EF. A formula to estimate the approximate surface area if height and weight be known. Arch Intern Medicine. 1916; 17:863-71.
  % Wang Y, Moss J, Thisted R. Predictors of body surface area. J Clin Anesth. 1992; 4(1):4-10.
  HDR.Patient.BSA = 0.007184 * HDR.Patient.Weight^0.425 * HDR.Patient.Height^0.725;
end;

% check consistency
if (HDR.NS>0) && HDR.FLAG.OVERFLOWDETECTION && ~isfield(HDR,'THRESHOLD') && ~strcmp(HDR.TYPE,'EVENT'),
  fprintf(HDR.FILE.stderr,'Warning SOPEN: Automated OVERFLOWDETECTION not supported - check yourself for saturation artifacts.\n');
end;

% identify type of signal, complete header information
if HDR.NS>0,
  HDR = physicalunits(HDR); % complete information on PhysDim, and PhysDimCode
  HDR = leadidcodexyz(HDR); % complete information on LeadIdCode and Electrode positions of EEG channels.
  if ~isfield(HDR,'Label')
    HDR.Label = cellstr([repmat('#',HDR.NS,1),int2str([1:HDR.NS]')]);
  elseif isempty(HDR.Label)
    HDR.Label = cellstr([repmat('#',HDR.NS,1),int2str([1:HDR.NS]')]);
  elseif ischar(HDR.Label)
    HDR.Label = cellstr(HDR.Label);
  end;
  if ischar(HDR.PhysDim)
    HDR.PhysDim = cellstr(HDR.PhysDim);
  end;
  HDR.CHANTYP = repmat(' ',1,HDR.NS);
  tmp = HDR.NS-length(HDR.Label);
  %HDR.Label = [HDR.Label(1:HDR.NS,:);repmat(' ',max(0,tmp),size(HDR.Label,2))];
  Label = char(HDR.Label);
  tmp = reshape(lower([[Label(1:min(HDR.NS,size(Label,1)),:);repmat(' ',max(0,tmp),size(Label,2))],repmat(' ',HDR.NS,1)])',1,HDR.NS*(size(Label,2)+1));
  
  HDR.CHANTYP(ceil([strfind(tmp,'eeg'),strfind(tmp,'meg')]/(size(Label,2)+1))) = 'E';
  HDR.CHANTYP(ceil([strfind(tmp,'emg')]/(size(Label,2)+1))) = 'M';
  HDR.CHANTYP(ceil([strfind(tmp,'eog')]/(size(Label,2)+1))) = 'O';
  HDR.CHANTYP(ceil([strfind(tmp,'ecg'),strfind(tmp,'ekg')]/(size(Label,2)+1))) = 'C';
  HDR.CHANTYP(ceil([strfind(tmp,'air'),strfind(tmp,'resp')]/(size(Label,2)+1))) = 'R';
  HDR.CHANTYP(ceil([strfind(tmp,'trig')]/(size(Label,2)+1))) = 'T';
end;

% add trigger information for triggered data
if HDR.FLAG.TRIGGERED && isempty(HDR.EVENT.POS)
  HDR.EVENT.POS = [0:HDR.NRec-1]'*HDR.SPR+1;
  HDR.EVENT.TYP = repmat(hex2dec('0300'),HDR.NRec,1);
  HDR.EVENT.CHN = repmat(0,HDR.NRec,1);
  HDR.EVENT.DUR = repmat(0,HDR.NRec,1);
end;

% apply channel selections to EVENT table
if any(CHAN) && ~isempty(HDR.EVENT.POS) && isfield(HDR.EVENT,'CHN'),	% only if channels are selected.
  sel = (HDR.EVENT.CHN(:)==0);	% memory allocation, select all general events
  for k = find(~sel'),		% select channel specific elements
    sel(k) = any(HDR.EVENT.CHN(k)==CHAN);
  end;
  HDR.EVENT.POS = HDR.EVENT.POS(sel);
  HDR.EVENT.TYP = HDR.EVENT.TYP(sel);
  HDR.EVENT.DUR = HDR.EVENT.DUR(sel);	% if EVENT.CHN available, also EVENT.DUR is defined.
  HDR.EVENT.CHN = HDR.EVENT.CHN(sel);
  % assigning new channel number
  a = zeros(1,HDR.NS);
  for k = 1:length(CHAN),		% select channel specific elements
    a(CHAN(k)) = k;		% assigning to new channel number.
  end;
  ix = HDR.EVENT.CHN>0;
  HDR.EVENT.CHN(ix) = a(HDR.EVENT.CHN(ix));	% assigning new channel number
end;

% complete event information - needed by SVIEWER
if ~isfield(HDR.EVENT,'CHN') && ~isfield(HDR.EVENT,'DUR'),
  HDR.EVENT.CHN = zeros(size(HDR.EVENT.POS));
  HDR.EVENT.DUR = zeros(size(HDR.EVENT.POS));
  
  % convert EVENT.Version 1 to 3, currently used by GDF, BDF and alpha
  flag_remove = zeros(size(HDR.EVENT.TYP));
  types  = unique(HDR.EVENT.TYP);
  for k1 = find(bitand(types(:)',hex2dec('8000')));
    TYP0 = bitand(types(k1),hex2dec('7fff'));
    TYP1 = types(k1);
    ix0  = (HDR.EVENT.TYP==TYP0);
    ix1  = (HDR.EVENT.TYP==TYP1);
    
    if sum(ix0)==sum(ix1),
      HDR.EVENT.DUR(ix0) = HDR.EVENT.POS(ix1) - HDR.EVENT.POS(ix0);
      flag_remove = flag_remove | (HDR.EVENT.TYP==TYP1);
    else
      fprintf(2,'Warning SOPEN: number of event onset (TYP=%s) and event offset (TYP=%s) differ (%i,%i)\n',dec2hex(double(TYP0)),dec2hex(double(TYP1)),sum(ix0),sum(ix1));
      %% double(.) operator needed because Matlab6.5 can not fix fix(uint16(..))
    end;
  end
  if any(HDR.EVENT.DUR<0)
    fprintf(2,'Warning SOPEN: EVENT ONSET later than EVENT OFFSET\n',dec2hex(TYP0),dec2hex(TYP1));
    %HDR.EVENT.DUR(:) = 0
  end;
  HDR.EVENT.TYP = HDR.EVENT.TYP(~flag_remove);
  HDR.EVENT.POS = HDR.EVENT.POS(~flag_remove);
  HDR.EVENT.CHN = HDR.EVENT.CHN(~flag_remove);
  HDR.EVENT.DUR = HDR.EVENT.DUR(~flag_remove);
end;
[tmp,ix] = sort(HDR.EVENT.POS);
HDR.EVENT.TYP=HDR.EVENT.TYP(ix);
HDR.EVENT.POS=HDR.EVENT.POS(ix);
HDR.EVENT.DUR=HDR.EVENT.DUR(ix);
HDR.EVENT.CHN=HDR.EVENT.CHN(ix);

% Calibration matrix
if any(HDR.FILE.PERMISSION=='r') && (HDR.NS>0);
  if isempty(ReRefMx)     % CHAN==0,
    ReRefMx = speye(max(1,HDR.NS));
  end;
  sz = size(ReRefMx);
  if (HDR.NS > 0) && (sz(1) > HDR.NS),
    fprintf(HDR.FILE.stderr,'ERROR SOPEN: to many channels (%i) required, only %i channels available.\n',size(ReRefMx,1),HDR.NS);
    HDR = sclose(HDR);
    return;
  end;
  if ~isfield(HDR,'Calib')
    HDR.Calib = sparse(2:HDR.NS+1,1:HDR.NS,1);
  end;
  if ~HDR.FLAG.FORCEALLCHANNEL,
    HDR.Calib = HDR.Calib*sparse([ReRefMx; zeros(HDR.NS-sz(1),sz(2))]);
  else
    HDR.ReRefMx = ReRefMx;
  end;
  
  HDR.InChanSelect = find(any(HDR.Calib(2:HDR.NS+1,:),2));
  HDR.Calib = sparse(HDR.Calib([1;1+HDR.InChanSelect(:)],:));
  if strcmp(HDR.TYPE,'native')
    HDR.data = HDR.data(:,HDR.InChanSelect);
  end;
end;

